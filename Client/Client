#!/usr/bin/python3

import socket
import sys
from datetime import datetime
from Crypto.PublicKey import RSA
from Requests import register, recv_message, send_message, recv, decrypt

client_RSA_key = None
server_RSA_key_pub = None


def title():
    print("******************************************")
    print("*                                        *")
    print("*         S E C U R E   C H A T          *")
    print("*                                        *")
    print("******************************************")

def menu(a=None,b=None,c=None, d=None):
    print("1. Send msg")
    print("2. Get msgs")
    print("3. Help")
    print("4. Exit")

def prompt():
    choice = input("sec_chat$ ")
    return choice
    
def exit_program(a=None, b=None, c=None, d=None):
    exit()

# Dictionary mapping user commands to their functions
actions = { '1' : send_message,
            '2' : recv_message,
            '3' : menu,
            '4' : exit_program }


def initialize():
    '''Check if asymmetric key exists; generate if not 
    Load server RSA key 
    '''
    # check for client RSA key
    global server_RSA_key_pub
    global client_RSA_key
    try: 
        f = open('client_key.pem', 'rb')
        client_RSA_key = RSA.importKey(f.read())
        print("client key found!")
        f.close()
    except FileNotFoundError:
        print('No client RSA key found, generation...')
        client_key =  RSA.generate(2048)
        with open('client_key.pem', 'wb+') as f:
            f.write(client_key.exportKey('PEM'))

    # check for server public key
    try:
        f = open('server_pub.pem', 'rb') 
        key = f.read()
        server_RSA_key_pub = RSA.importKey(key)
        print("server key found!")
        f.close()
    except FileNotFoundError:
        print('No RSA key found')

    
def show_response(source, message):
    '''show formatted response from server
    '''
    time = str(datetime.now().time())
    for message_line in message.split('|'):
        print('[{} {}] {}'.format(source, time, message_line))

def main():
    title()

    # load keys
    initialize()

    # connect to server
    sock = socket.socket()
    server_addr = ('localhost', 10000)
    sock.connect(server_addr)
    print('connected to ip:{} port:{}'.format(*server_addr))
    print('\n')

    # login / register
    username = register(sock, server_RSA_key_pub, client_RSA_key)
    data = recv(sock)
    if data:
        key_data, msg_data = data.split('%')
        aes_key = decrypt(key_data, client_RSA_key, 'RSA')
        message = decrypt(msg_data, aes_key, 'AES')
        show_response('SERVER', message)
        if message == 'Bad login info!':
            exit_program()
    menu()

    # send / receive messages
    try:
        while True:
            data = None
            a = prompt()
            actions[a](sock, server_RSA_key_pub, client_RSA_key, username)
            if a != "3":    
                data = recv(sock)
            if data:
                key_data, msg_data = data.split('%')
                aes_key = decrypt(key_data, client_RSA_key, 'RSA')
                message = decrypt(msg_data, aes_key, 'AES')
                show_response('SERVER', message)
    finally:
        print('closing socket')
        sock.close()

    




if __name__ == '__main__':
    main()
