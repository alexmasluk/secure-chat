#!/usr/bin/python3
import socket
import sys
import threading
from Crypto.PublicKey import RSA
from Requests import register, send_message, recv_message, decrypt, send, recv
action = {'reg' : register,
          'snd' : send_message,
          'rcv' : recv_message}
active_connections = {}

def initialize():
    try:
        f = open('server_key.pem', 'rb')
        server_key = RSA.importKey(f.read())
        f.close()
    except FileNotFoundError:
        print('no rsa key found')
    return server_key
    
def handle_client(connection, client_addr):
    '''Handle communication with individual client
    Decide what action to take 
    '''
    print('started client thread successfully. entering loop')
    rsa_key = initialize()
    while True:
        aes_key = None
        data = recv(connection)
        if data:
            print('received "{}" from client'.format(data))
            key_data, msg_data = data.split('%')
            #print("encryptedKey = '{}' encryptedMessage = '{}'".format(key_data, msg_data))
            # decrypt the AES key using server's private RSA key
            aes_key = decrypt(key_data, rsa_key, 'RSA')
            # use that AES key to decrypt the message itself
            message = decrypt(msg_data, aes_key, 'AES')

            #print("key = '{}' message = '{}'".format(aes_key, message))
            request, content = message.split('#')
            if request in ('reg', 'snd', 'rcv'):
                action[request](connection, content)
            else: 
                connection.sendall(b"I couldn't understand you!")
 
        else:
            print('client stopped sending')
            break
        

def main():
    sock = socket.socket()
    server_address = ('', 10000)
    sock.bind(server_address)
    print('socket initialized, ip:{} port:{}'.format(*server_address))
    sock.listen(1)

    try:
        while True:     # Accept client connection, dispatch thread per client
            print('Waiting for client')
            c, client_addr = sock.accept()
            print('got client {}'.format(client_addr))        
            t = threading.Thread(target=handle_client, args=(c, client_addr))
            t.start()
    finally:
        sock.close()




if __name__ == '__main__':
    main()
